indicators:
  - key: "ME_Child_Total"
    description: "ME_Child_Total_label"
    indicatorQuery: "SELECT count(*) from ec_client child
                      JOIN client_register_type reg_type ON child.base_entity_id=reg_type.base_entity_id
                      WHERE reg_type.register_type='child'
                      AND '%s' = strftime('%Y-%m-%d', child.date)"
    grouping: "child"

  # Additional DHIS2 Indicators

  - key: "ME_Fully_Immunized_Static"
    description: "Fully Immunized"
    indicatorQuery: "select age,count(*) from (select
                     CASE
                           WHEN round(julianday('now')-julianday(ec_client.dob)) > 365.0 THEN 'Over_1_Static'
                           WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Static'
                           ELSE 'Null'
                           END age,count(*)
                     from vaccines
                     join ec_client
                     on vaccines.base_entity_id = ec_client.base_entity_id
                     where '%s' = strftime('%Y-%m-%d', ec_client.date)
                     and  vaccines.child_location_id=vaccines.location_id OR vaccines.child_location_id IS NULL
                     group by vaccines.base_entity_id,age
                     having sum(case when name = 'bcg' then 1 else 0 end) > 0
                     and sum(case when name = 'ipv' then 1 else 0 end) > 0
                     and sum(case when name = 'mr_1' then 1 else 0 end) > 0
                     and sum(case when name = 'opv_1' then 1 else 0 end) > 0
                     and sum(case when name = 'opv_3' then 1 else 0 end) > 0
                     and sum(case when name = 'pcv_1' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_1' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_2' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_3' then 1 else 0 end) > 0
                     and sum(case when name = 'rota_1' then 1 else 0 end) > 0)"
    isMultiResult: true
    expectedIndicators:
      - "ME_Fully_Immunized_Static_Over_1_Static"
      - "ME_Fully_Immunized_Static_Under_1_Static"

    grouping: "child"

  - key: "ME_Fully_Immunized_Outreach"
    description: "Fully Immunized"
    indicatorQuery: "select age,count(*) from (select
                     CASE
                           WHEN round(julianday('now')-julianday(ec_client.dob)) > 365.0 THEN 'Over_1_Outreach'
                           WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Outreach'
                           ELSE 'Null'
                           END age,count(*)
                     from vaccines
                     join ec_client
                     on vaccines.base_entity_id = ec_client.base_entity_id
                     where '%s' = strftime('%Y-%m-%d', ec_client.date)
                     and vaccines.child_location_id <> vaccines.location_id OR vaccines.child_location_id IS NOT NULL
                     group by vaccines.base_entity_id,age
                     having sum(case when name = 'bcg' then 1 else 0 end) > 0
                     and sum(case when name = 'ipv' then 1 else 0 end) > 0
                     and sum(case when name = 'mr_1' then 1 else 0 end) > 0
                     and sum(case when name = 'opv_1' then 1 else 0 end) > 0
                     and sum(case when name = 'opv_3' then 1 else 0 end) > 0
                     and sum(case when name = 'pcv_1' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_1' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_2' then 1 else 0 end) > 0
                     and sum(case when name = 'penta_3' then 1 else 0 end) > 0
                     and sum(case when name = 'rota_1' then 1 else 0 end) > 0)"
    isMultiResult: true
    expectedIndicators:
      - "ME_Fully_Immunized_Outreach_Over_1_Outreach"
      - "ME_Fully_Immunized_Outreach_Under_1_Outreach"
    grouping: "child"

  - key: "ME_Vaccines_Age_Static"
    description: "ME_Vaccines_Age_Static_label"
    indicatorQuery: "SELECT vaccines.name,
                       CASE
                          WHEN round(julianday('now')-julianday(ec_client.dob)) > 365.0 THEN 'Over_1_Static'
                          WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Static'
                          ELSE 'Null'
                          END age, count(*)
                      FROM vaccines
                      INNER JOIN ec_client
                      ON vaccines.base_entity_id = ec_client.base_entity_id
                      WHERE vaccines.date >= round((julianday(strftime('%Y-%m-%d', '%s', 'utc')) - 2440587.5) * 86400.0 * 1000)
                      AND vaccines.date < round((julianday(strftime('%Y-%m-%d', '%s', '+1 day', 'utc')) - 2440587.5) * 86400.0 * 1000)
                      AND vaccines.child_location_id = vaccines.location_id OR vaccines.child_location_id IS NULL
                      AND ec_client.dob >= date('now', '-5 years')
                      GROUP BY vaccines.name, age"
    isMultiResult: true
    expectedIndicators:
      - "ME_Vaccines_Age_Static_bcg_Over_1_Static"
      - "ME_Vaccines_Age_Static_bcg_Under_1_Static"
      - "ME_Vaccines_Age_Static_opv_0_Over_1_Static"
      - "ME_Vaccines_Age_Static_opv_0_Under_1_Static"
      - "ME_Vaccines_Age_Static_opv_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_opv_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_opv_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_opv_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_opv_3_Over_1_Static"
      - "ME_Vaccines_Age_Static_opv_3_Under_1_Static"
      - "ME_Vaccines_Age_Static_penta_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_penta_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_penta_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_penta_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_penta_3_Over_1_Static"
      - "ME_Vaccines_Age_Static_penta_3_Under_1_Static"
      - "ME_Vaccines_Age_Static_pcv_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_pcv_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_pcv_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_pcv_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_rota_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_rota_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_rota_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_rota_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_mv_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_mv_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_mv_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_mv_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_mv_3_Over_1_Static"
      - "ME_Vaccines_Age_Static_mv_3_Under_1_Static"
      - "ME_Vaccines_Age_Static_mv_4_Over_1_Static"
      - "ME_Vaccines_Age_Static_mv_4_Under_1_Static"
      - "ME_Vaccines_Age_Static_mr_1_Over_1_Static"
      - "ME_Vaccines_Age_Static_mr_1_Under_1_Static"
      - "ME_Vaccines_Age_Static_mr_2_Over_1_Static"
      - "ME_Vaccines_Age_Static_mr_2_Under_1_Static"
      - "ME_Vaccines_Age_Static_ipv_Over_1_Static"
      - "ME_Vaccines_Age_Static_ipv_Under_1_Static"
    grouping: "child"

  - key: "ME_Vaccines_Age_Outreach"
    description: "ME_Vaccines_Age_Outreach_label"
    indicatorQuery: "SELECT vaccines.name,
                       CASE
                          WHEN round(julianday('now')-julianday(ec_client.dob)) > 365.0 THEN 'Over_1_Outreach'
                          WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Outreach'
                          ELSE 'Null'
                          END age, count(*) counter
                      FROM vaccines
                      INNER JOIN ec_client
                      ON vaccines.base_entity_id = ec_client.base_entity_id
                      WHERE vaccines.date >= round((julianday(strftime('%Y-%m-%d', '%s', 'utc')) - 2440587.5) * 86400.0 * 1000)
                      AND vaccines.date < round((julianday(strftime('%Y-%m-%d', '%s', '+1 day', 'utc')) - 2440587.5) * 86400.0 * 1000)
                      AND vaccines.child_location_id = vaccines.location_id OR vaccines.child_location_id IS NOT NULL
                      AND ec_client.dob >= date('now', '-5 years')
                      GROUP BY vaccines.name, age"
    isMultiResult: true
    expectedIndicators:
      - "ME_Vaccines_Age_Outreach_bcg_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_bcg_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_0_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_0_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_3_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_opv_3_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_3_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_penta_3_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_pcv_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_pcv_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_pcv_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_pcv_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_rota_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_rota_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_rota_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_rota_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_3_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mv_3_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mr_1_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mr_1_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mr_2_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_mr_2_Under_1_Outreach"
      - "ME_Vaccines_Age_Outreach_ipv_Over_1_Outreach"
      - "ME_Vaccines_Age_Outreach_ipv_Under_1_Outreach"
    grouping: "child"

  - key: "ME_Recurring_Age_Static"
    description: "ME_Recurring_Age_Static_label"
    indicatorQuery: "SELECT recur_type.name,
                       CASE
                            WHEN round(julianday('now')-julianday(ec_client.dob)) > 365.0 THEN 'Over_Static'
                            WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Static'
                            ELSE 'Null'
                            END age, ec_client.gender, count(*) counter
                       FROM recurring_service_records recur
                       INNER JOIN ec_client
                       ON recur.base_entity_id = ec_client.base_entity_id
                       JOIN recurring_service_types recur_type
                       ON recur_type._id = recur.recurring_service_id
                       WHERE recur.date >= round((julianday(strftime('%Y-%m-%d', '%s', 'utc')) - 2440587.5) * 86400.0 * 1000)
                       AND recur.date < round((julianday(strftime('%Y-%m-%d', '%s', '+1 day', 'utc')) - 2440587.5) * 86400.0 * 1000)
                       AND ec_client.dob >= date('now', '-5 years')
                       AND recur.child_location_id=recur.location_id OR recur.child_location_id IS NULL
                       AND recur_type.name IN ('Vit_A_1', 'Vit_A_2','Deworming_1','Deworming_2')
                       GROUP BY recur_type.name, age"
    isMultiResult: true
    expectedIndicators:
      - "ME_Recurring_Age_Static_Deworming_1_Over_1_Static_Male"
      - "ME_Recurring_Age_Static_Deworming_1_Under_1_Static_Male"
      - "ME_Recurring_Age_Static_Deworming_2_Over_1_Static_Male"
      - "ME_Recurring_Age_Static_Deworming_2_Under_1_Static_Male"
      - "ME_Recurring_Age_Static_Vit_A_1_Over_1_Static_Male"
      - "ME_Recurring_Age_Static_Vit_A_1_Under_1_Static_Male"
      - "ME_Recurring_Age_Static_Vit_A_2_Over_1_Static_Male"
      - "ME_Recurring_Age_Static_Vit_A_2_Under_1_Static_Male"
      - "ME_Recurring_Age_Static_Deworming_1_Over_1_Static_Female"
      - "ME_Recurring_Age_Static_Deworming_1_Under_1_Static_Female"
      - "ME_Recurring_Age_Static_Deworming_2_Over_1_Static_Female"
      - "ME_Recurring_Age_Static_Deworming_2_Under_1_Static_Female"
      - "ME_Recurring_Age_Static_Vit_A_1_Over_1_Static_Female"
      - "ME_Recurring_Age_Static_Vit_A_1_Under_1_Static_Female"
      - "ME_Recurring_Age_Static_Vit_A_2_Over_1_Static_Female"
      - "ME_Recurring_Age_Static_Vit_A_2_Under_1_Static_Female"
    grouping: "child"

  - key: "ME_Recurring_Age_Outreach"
    description: "ME_Recurring_Age_Outreach_label"
    indicatorQuery: "SELECT recur_type.name,
                         CASE
                              WHEN round(julianday('now')-julianday(ec_client.dob)) >= 365.0 THEN 'Over_1_Outreach'
                              WHEN round(julianday('now')-julianday(ec_client.dob)) < 365.0 THEN 'Under_1_Outreach'
                              ELSE 'Null'
                              END age, ec_client.gender, count(*) counter
                         FROM recurring_service_records recur
                         INNER JOIN ec_client
                         ON recur.base_entity_id = ec_client.base_entity_id
                         JOIN recurring_service_types recur_type
                         ON recur_type._id = recur.recurring_service_id
                         WHERE recur.date >= round((julianday(strftime('%Y-%m-%d', '%s', 'utc')) - 2440587.5) * 86400.0 * 1000)
                         AND recur.date < round((julianday(strftime('%Y-%m-%d', '%s', '+1 day', 'utc')) - 2440587.5) * 86400.0 * 1000)
                         AND ec_client.dob >= date('now', '-5 years')
                         AND recur.child_location_id <> recur.location_id OR recur.child_location_id IS NOT NULL
                         AND recur_type.name IN ('Vit_A_1', 'Vit_A_2','Deworming_1','Deworming_2')
                         GROUP BY recur_type.name, age"
    isMultiResult: true
    expectedIndicators:
      - "ME_Recurring_Age_Outreach_Deworming_1_Over_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Deworming_1_Under_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Deworming_2_Over_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Deworming_2_Under_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Vit_A_1_Over_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Vit_A_1_Under_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Vit_A_2_Over_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Vit_A_2_Under_1_Outreach_Male"
      - "ME_Recurring_Age_Outreach_Deworming_1_Over_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Deworming_1_Under_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Deworming_2_Over_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Deworming_2_Under_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Vit_A_1_Over_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Vit_A_1_Under_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Vit_A_2_Over_1_Outreach_Female"
      - "ME_Recurring_Age_Outreach_Vit_A_2_Under_1_Outreach_Female"
    grouping: "child"

  # ANC Indicators
  - key: "ME_Number_Of_Women_Registered"
    description: "Number of women registered"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                     where previous_contact.contact_no = '1' group by base_entity_id
                     having sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_Pregnancy_Tests_Done_In_The_First_Trimester"
    description: "Pregnancy tests Done In the first trimester"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                     where previous_contact.contact_no = '1' group by base_entity_id
                     having sum(case when key = 'pregnancy_test_first_trimester' and value = 'yes' then 1 else 0 end) > 0
                     and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_Pregnancy_Tests_Done_After_The_First_Trimester"
    description: "Pregnancy tests Done AFTER the first trimester"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'pregnancy_test_first_trimester' and value = 'no' then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_Week_Of_First_ANC_Visit_0_12_weeks"
    description: "Week of First ANC Visit (0-12 weeks)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'gest_age_openmrs' and cast(value as integer) <= 12 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_Week_Of_First_ANC_Visit_13_plus_weeks"
    description: "Week of First ANC Visit (13+ weeks)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'gest_age_openmrs' and cast(value as integer) > 12 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_First_Visit_Prev_Negative"
    description: "HIV status first visit (Prev. negative)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') = 0 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_First_Visit_Prev_Positive"
    description: "HIV status first visit (Prev. positive)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') > 0 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_First_Visit_New_Negative"
    description: "HIV status first visit (New negative)"
    indicatorQuery: "select count(1) from (SELECT distinct base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'hiv_test_result' and value = 'negative' then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_First_Visit_New_Positive"
    description: "HIV status first visit (New positive)"
    indicatorQuery: "select count(1) from (SELECT distinct base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_First_Visit_Not_Done"
    description: "HIV status first visit (Not done)"
    indicatorQuery: "select count(1) from (SELECT distinct base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'hiv_test_status' and value = 'not_done' then 1 else 0 end ) > 0
                   or sum(case when key = 'hiv_test_status' then 1 else 0 end ) = 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -Ask about this line or sum(case when key = 'hiv_test_status' then 1 else 0 end ) = 0

  - key: "ME_ART_Status_First_Visit_Not_On_ART"
    description: "ART status first visit (Not on ART)"
    indicatorQuery: "select count(1) from (SELECT distinct base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') > 0 then 1 else 0 end) > 0
                   and sum(case when key = 'medications' and instr(value, 'arvs') = 0 then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_ART_Status_First_Visit_On_ART_Before_ANC"
    description: "ART status first visit( On ART before ANC)"
    indicatorQuery: "select count(1) from (SELECT base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') > 0 then 1 else 0 end) > 0
                   and sum(case when key = 'medications' and instr(value, 'arvs') > 0 then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_ART_Status_First_Visit_Start_ART_0_27_Weeks"
    description: "ART status First Visit (Start ART 0-27 weeks)"
    indicatorQuery: "select count(1) from (SELECT base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'art_medication' and value = 'done' > 0 then 1 else 0 end ) > 0
                   and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                   and sum(case when key = 'gest_age_openmrs' and cast(value as integer) <= 27 then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_ART_Status_First_Visit_Start_ART_28_plus_Weeks"
    description: "ART status first visit (Start ART 28+ weeks)"
    indicatorQuery: "select count(1) from (SELECT base_entity_id FROM  previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'art_medication' and value = 'done' > 0 then 1 else 0 end ) > 0
                   and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                   and sum(case when key = 'gest_age_openmrs' and cast(value as integer) >= 28 then 1 else 0 end ) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d', '%s', 'localtime') then 1 else 0 end ) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  ##Booking Cohort
  - key: "ME_HIV_Status_Final_Prev_Negative"
    description: "HIV status Final (Prev negative)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') = 0 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_Final_Prev_Positive"
    description: "HIV status Final (Prev positive)"
    indicatorQuery: "select count(1) from (select base_entity_id from previous_contact
                   where previous_contact.contact_no = '1' group by base_entity_id
                   having sum(case when key = 'health_conditions' and instr(value, 'hiv') > 0 then 1 else 0 end) > 0
                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0)"
    grouping: "anc"
    #QA 08/05/2020 -OK

  - key: "ME_HIV_Status_Final_New_Negative"
    description: "HIV status Final (New negative)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'hiv_test_result' and value = 'negative' then 1 else 0 end ) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 - OK

  - key: "ME_HIV_Status_Final_New_Positive"
    description: "HIV status Final (New positive)"
    #    indicatorQuery: "select count(1) from (SELECT distinct base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end ) > 0)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                    JOIN
                    ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                    having sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                    ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK


  - key: "ME_HIV_Status_Final_Not_Done"
    description: "HIV status Final (Not done)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                      JOIN
                      ( select y.base_entity_id from previous_contact y
                      group by y.base_entity_id
                      having sum(case when key = 'hiv_test_status' and value = 'not_done' then 1 else 0 end ) > 0
                      or sum(case when key = 'hiv_test_status' then 1 else 0 end ) = 0
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
  #QA 10/05/2020 -OK

  - key: "ME_ART_Status_Final_Visit_Not_On_ART"
    description: "ART status Final Visit (Not on ART)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                      JOIN
                      ( select y.base_entity_id from previous_contact y
                      group by y.base_entity_id
                      having sum(case when key = 'art_medication' and value  <>  'done' then 1 else 0 end ) > 0
                      or sum(case when key = 'art_medication' then 1 else 0 end ) = 0
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_ART_Status_Final_Visit_On_ART_Before_ANC"
    description: "ART status Final Visit ( On ART before ANC)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                where z.contact_no = '1' group by z.base_entity_id
                having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                ) a
                JOIN
                ( select y.base_entity_id from previous_contact y
                group by y.base_entity_id
                having sum(case when key = 'medications' and instr(value, 'arvs') > 0 then 1 else 0 end ) > 0
                ) b
                ON a.base_entity_id = b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_ART_Status_Final_Visit_Start_ART_0_27_Weeks"
    description: "ART status Final Visit (Start ART 0-27 weeks)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                    JOIN
                    ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                    having sum(case when key = 'art_medication' and value = 'done' then 1 else 0 end ) > 0
                    and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                    and sum(case when key = 'gest_age_openmrs' and cast(value as integer) <= 27 then 1 else 0 end ) > 0
                    ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_ART_Status_Final_Visit_Start_ART_28_plus_Weeks"
    description: "ART status Final Visit (Start ART 28+ weeks)"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                        where z.contact_no = '1' group by z.base_entity_id
                        having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                        ) a
                        JOIN
                        ( select y.base_entity_id from previous_contact y
                        group by y.base_entity_id
                        having sum(case when key = 'art_medication' and value = 'done' then 1 else 0 end ) > 0
                        and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                        and sum(case when key = 'gest_age_openmrs' and cast(value as integer) >= 28 then 1 else 0 end ) > 0
                        ) b
                        ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_CPT_out_of_HIV_positive"
    description: "On CPT out of HIV+"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                            where z.contact_no = '1' group by z.base_entity_id
                            having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                            ) a
                            JOIN
                            ( select y.base_entity_id from previous_contact y
                            group by y.base_entity_id
                            having sum(case when key = 'cpt_medication' and value = 'done' then 1 else 0 end ) > 0
                            and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                           ) b
                            ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Not_on_CPT"
    description: "Not on CPT"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                    JOIN
                    ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                    having sum(case when key = 'cpt_medication' and value  <>  'done' then 1 else 0 end ) > 0
                    and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                    or sum(case when key = 'cpt_medication' then 1 else 0 end ) = 0
                   ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
  #QA 10/05/2020 -OK

  - key: "ME_NVP_syrup_given"
    description: "NVP syrup given"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'nvp_medication' and value = 'done' then 1 else 0 end ) > 0
                     and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                    ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_NVP_syrup_not_given"
    description: "NVP syrup not given"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                    JOIN
                    ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                    having sum(case when key = 'nvp_medication' and value  <>  'done' then 1 else 0 end ) > 0
                    and sum(case when key = 'hiv_test_result' and value = 'positive' then 1 else 0 end ) > 0
                    or sum(case when key = 'nvp_medication' then 1 else 0 end ) = 0
                    ) b
                   ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Visits_Per_Woman_With_1_Visit"
    description: "Total visits per woman with 1 visit"
    #    indicatorQuery: "select count(1) from (select ec_mother_details.base_entity_id from ec_mother_details
    #                     join previous_contact on previous_contact.base_entity_id = ec_mother_details.base_entity_id
    #                     where ec_mother_details.next_contact = '2' group by ec_mother_details.base_entity_id
    #                     having sum(case when z.contact_no = '1' and key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end ) > 0)"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                     JOIN
                    ( select y.base_entity_id from ec_mother_details y
                    where y.next_contact = '2'  group by y.base_entity_id
                    ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Visits_Per_Woman_With_2_Visits"
    description: "Total visits per woman with 2 visits"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                       JOIN
                      ( select y.base_entity_id from ec_mother_details y
                        where y.next_contact = '3' group by y.base_entity_id
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Visits_Per_Woman_With_3_Visits"
    description: "Total visits per woman with 3 visits"
    #    indicatorQuery: "select count(1) from (select ec_mother_details.base_entity_id from ec_mother_details
    #                     join previous_contact on previous_contact.base_entity_id = ec_mother_details.base_entity_id
    #                     where ec_mother_details.next_contact = '4' group by ec_mother_details.base_entity_id
    #                     having sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end ) > 0)"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                       JOIN
                      (
                      select y.base_entity_id from ec_mother_details y
                       where y.next_contact = '4'  group by y.base_entity_id
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Visits_Per_Woman_With_4_Visits"
    description: "Total visits per woman with 4 visits"
    #    indicatorQuery: "select count(1) from (select ec_mother_details.base_entity_id from ec_mother_details
    #                     join previous_contact on previous_contact.base_entity_id = ec_mother_details.base_entity_id
    #                     where ec_mother_details.next_contact = '5' group by ec_mother_details.base_entity_id
    #                     having sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end ) > 0)"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     (select y.base_entity_id from ec_mother_details y
                      where y.next_contact = '5'  group by y.base_entity_id
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Visits_Per_Woman_With_5_plus_Visits"
    description: "Total visits per woman with 5+ visits"
    #    indicatorQuery: "select count(1) from (select ec_mother_details.base_entity_id from ec_mother_details
    #                     join previous_contact on previous_contact.base_entity_id = ec_mother_details.base_entity_id
    #                     where cast(ec_mother_details.next_contact as integer) >= 5 group by ec_mother_details.base_entity_id
    #                     having sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end ) > 0)"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                       where z.contact_no = '1' group by z.base_entity_id
                       having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                       ) a
                        JOIN
                       ( select y.base_entity_id from ec_mother_details y
                         where cast(y.next_contact as integer) >= 5 group by y.base_entity_id
                       ) b
                       ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_With_Preeclampsia"
    description: "With preeclampsia"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'severe_preeclampsia' and value  = '1' or key = 'preeclampsia' and value  = '1' then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end)))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                      JOIN
                      ( select y.base_entity_id from previous_contact y
                       group by y.base_entity_id
                      having sum(case when y.key = 'severe_preeclampsia' and value  = '1' then 1 else 0 end) > 0
                      or sum(case when y.key = 'preeclampsia' and value  = '1' then 1 else 0 end) > 0
                      ) b
                       ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_With_No_Preeclampsia"
    description: "With no pre eclampsia"
    #    indicatorQuery: "select count(1) from (SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'severe_preeclampsia' and value  <> '1' then 1 else 0 end) > 0
    #                   and sum(case when key = 'preeclampsia' and value  <> '1' then 1 else 0 end) >0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 )"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'severe_preeclampsia' and value  <> '1' then 1 else 0 end) > 0
                     and sum(case when key = 'preeclampsia' and value  <> '1' then 1 else 0 end) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Number_With_TDV_doses_less_than_2"
    description: "Total number with TDV doses < 2"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'tt_immun_status' and (value = 'tdv_not_received' or value = '1_received') then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                      JOIN
                      ( select y.base_entity_id from previous_contact y
                      group by y.base_entity_id
                      having sum (case when key = 'tt_immun_status' and (value = 'tdv_not_received' or value = '1_received' or value = 'unknown' or value = 'ttcv_not_received') then 1 else 0 end) > 0
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Total_Number_With_TDV_doses_2_plus"
    description: "Total number with TDV doses  2+"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'tt_immun_status' and (value = '2-4_doses' or value = '5_tdv_doses_received') then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                    having sum (case when key = 'tt_immun_status' and (value = '2-4_doses' or value = '5_tdv_doses_received' or value = '3_doses') then 1 else 0 end) > 0
                    or sum (case when key = 'tt2_dose_number' and value='1' then 1 else 0 end) > 0
                    ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_SP_Doses_0_Dose"
    description: "SP doses 0 dose"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'iptp_sp1' and value <> 'done' then 1 else 0 end) > 0
    #                   or sum (case when key = 'iptp_sp1' then 1 else 0 end) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                      where z.contact_no = '1' group by z.base_entity_id
                      having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                      ) a
                      JOIN
                      ( select y.base_entity_id from previous_contact y
                      group by y.base_entity_id
                      having sum (case when key = 'iptp_sp1' and value <> 'done' then 1 else 0 end) > 0
                      or sum (case when key = 'iptp_sp1' then 1 else 0 end) = 0
                      ) b
                      ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_SP_Doses_1_Dose"
    description: "SP doses 1 dose"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'iptp_sp1' and value = 'done' then 1 else 0 end) > 0
    #                   and sum (case when key = 'iptp_sp2' then 1 else 0 end) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum (case when key = 'iptp_sp1' and value = 'done' then 1 else 0 end) > 0
                     and sum (case when key = 'iptp_sp2' then 1 else 0 end) = 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_SP_Doses_2_Dose"
    description: "SP doses 2 dose"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'iptp_sp2' and value = 'done' then 1 else 0 end) > 0
    #                   and sum (case when key = 'iptp_sp3' then 1 else 0 end) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum (case when key = 'iptp_sp2' and value = 'done' then 1 else 0 end) > 0
                     and sum (case when key = 'iptp_sp3' then 1 else 0 end) = 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_SP_Doses_3_plus_Dose"
    description: "SP doses 3+ dose"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'iptp_sp3' and value = 'done' then 1 else 0 end ) > 0
    #                   and sum (case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) >0 ))"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum (case when key = 'iptp_sp3' and value = 'done' then 1 else 0 end) > 0
                      ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Albendazole_doses_None"
    description: "Albendazole doses None"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'deworm' and value <> 'done' then 1 else 0 end ) > 0
    #                   or sum(case when key = 'deworm' then 1 else 0 end) = 0
    #                   and sum (case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) >0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'deworm' and value <> 'done' then 1 else 0 end ) > 0
                     or sum(case when key = 'deworm' then 1 else 0 end) = 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Albendazole_doses_One_dose"
    description: "Albendazole doses 1 dose"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'deworm' and value = 'done' then 1 else 0 end ) > 0
    #                   and sum (case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) >0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'deworm' and value = 'done' then 1 else 0 end ) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_ITN_Bed_Nets_Given"
    description: "ITN (bed nets) given"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'itn_given' and value = 'done' then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum (case when key = 'itn_given' and value = 'done' then 1 else 0 end) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_ITN_Bed_Nets_Not_Given"
    description: "ITN (bed nets) not given"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'itn_given' and value <> 'done' then 1 else 0 end) > 0
    #                   or sum (case when key = 'itn_given' then 1 else 0 end) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"
    #
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                      JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                      having sum (case when key = 'itn_given' and value <> 'done' then 1 else 0 end) > 0
                      or sum (case when key = 'itn_given' then 1 else 0 end) = 0
                      ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Hb_(g/dl)_less_than_7"
    description: "Hb (g/dl)  < 7"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'hb_result' and cast(value as integer) < 7 then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                    where z.contact_no = '1' group by z.base_entity_id
                    having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                    ) a
                     JOIN
                    ( select y.base_entity_id from previous_contact y
                    group by y.base_entity_id
                     having sum(case when key = 'hb_result' and cast(value as integer) < 7 then 1 else 0 end) > 0
                     ) b
                    ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Hb_g_over_dl_greater_than_and_equal_to_7"
    description: "Hb (g/dl) >= 7"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum (case when key = 'hb_result' and cast(value as integer) >= 7 then 1 else 0 end) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'hb_result' and cast(value as integer) >= 7 then 1 else 0 end) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Hb_g_over_dl_ND"
    description: "Hb (g/dl) ND"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM  previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum( case when key = 'hb_test_status' and value = 'not_done' then 1 else 0 end) > 0
    #                   or sum( case when key = 'hb_test_status' then 1 else 0 end) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum( case when key = 'hb_test_status' and value = 'not_done' then 1 else 0 end) > 0
                     or sum( case when key = 'hb_test_status' then 1 else 0 end) = 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Syphilis_Status_Negative"
    description: "Syphilis status Negative"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'syphilis_positive' and value = '0' then 1 else 0 end ) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Syphilis_Status_Positive"
    description: "Syphilis status Positive"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'syphilis_positive' and value = '1' then 1 else 0 end ) > 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'syphilis_positive' and value = '1' then 1 else 0 end ) > 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_Syphilis_Status_Not_Done"
    description: "Syphilis status Not Done"
    #    indicatorQuery: "select count(1) from ((SELECT base_entity_id FROM previous_contact
    #                   where previous_contact.contact_no = '1' group by base_entity_id
    #                   having sum(case when key = 'syph_test_status' and value = 'not_done' then 1 else 0 end ) > 0
    #                   or sum(case when key = 'syph_test_status' then 1 else 0 end ) = 0
    #                   and sum(case when key = 'contact_date' and value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0 ))"

    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     group by y.base_entity_id
                     having sum(case when key = 'syph_test_status' and value = 'not_done' then 1 else 0 end ) > 0
                     or sum(case when key = 'syph_test_status' then 1 else 0 end ) = 0
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK

  - key: "ME_FeFo_More_Than_120"
    description: "FeFo Tablets given more than 120"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     where y.key = 'fefo_tablets_number_anaemia' or 'fefo_tablets_number'
                     group by y.base_entity_id
                     having sum(value)>= 120
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"

  - key: "ME_FeFo_Less_Than_120"
    description: "FeFo Tablets given less than 120"
    indicatorQuery: "select count(1) from (select z.base_entity_id from previous_contact z
                     where z.contact_no = '1' group by z.base_entity_id
                     having sum(case when z.key = 'contact_date' and z.value = strftime('%Y-%m-%d',  date('%s', '-6 months', 'localtime')) then 1 else 0 end) > 0
                     ) a
                     JOIN
                     ( select y.base_entity_id from previous_contact y
                     where y.key = 'fefo_tablets_number_anaemia' or 'fefo_tablets_number'
                     group by y.base_entity_id
                     having sum(value) < 120
                     ) b
                     ON a.base_entity_id=b.base_entity_id"
    grouping: "anc"
    #QA 10/05/2020 -OK
